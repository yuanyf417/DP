@startuml

class CashNormal {
+ double acceptCash(double,int)
}
note top of CashNormal

 *最基本包装[原价]
 
end note

interface ISale {
~ double acceptCash(double,int)
}
note top of ISale

 * 包装行为的抽象[销售模式]
 
end note

class CashSuper {
- ISale sale
+ void doCorate(ISale)
+ double acceptCash(double,int)
}
note top of CashSuper
 * 包装顶级接口
end note

class CashContext {
- ISale sale
+ <<Create>> CashContext(int)
+ double getResult(double,int)
}
note top of CashContext
 * 包装类的策略
end note
note right of CashContext::CashContext
 * 策略的选择
end note
note right of CashContext::getResult
 * 包装后的结果
end note
class CashReturn {
- double moneyCondition
- double moneyReturn
+ <<Create>> CashReturn(double,double)
+ double acceptCash(double,int)
}
note top of CashReturn

 * 自定义包装[满减]
 
end note
note left of CashReturn::moneyCondition

     * 满多少
     
end note
note right of CashReturn::moneyReturn

     * 减多少
     
end note

class CashRebate {
- double moneyRebae
+ <<Create>> CashRebate(double)
+ double acceptCash(double,int)
}
note top of CashRebate

 * 自定义包装[打折]
 
end note
note right of CashRebate::moneyRebae

     * 折扣

end note


ISale <|.. CashNormal : 实现
ISale <|.. CashSuper : 实现
CashSuper <|-- CashReturn : 继承
CashSuper <|-- CashRebate : 继承
CashContext o-- CashSuper : 聚合
@enduml